params {

    input               = null
    outdir              = "results"

    tools               = "vsearch"

    help                = false

    logo                = "${baseDir}/assets/pipelinelogo.png"
    run_name            = null

    reference_base      = null
    build_references    = false

    genome              = "tomato"

    blastdb             = null

    freebayes_min_alternate_count = 50
    freebayes_min_alternate_frac = 0.01

    bloomfilter         = "${baseDir}/assets/bloomfilter/phix.bf"

    plaintext_email     = false
    skip_multiqc        = false
    email               = false

    multiqc_config      = "${baseDir}/conf/multiqc_config.yaml"
    multiqc_logo        = "${baseDir}/assets/pipelinelogo.png"

    conda.enabled       = false
    singularity.enabled = false
    docker.enabled      = false
    podman.enabled      = false

    max_memory          = 128.GB
    max_cpus            = 16
    max_time            = 240.h
    maxMultiqcEmailFileSize = 25.MB

    publish_dir_mode    = 'copy'

    custom_config_base = "https://raw.githubusercontent.com/marchoeppner/nf-configs/main"

}

manifest {
    name = "marchoeppner/gmo-check"
    version = "0.4"
    description = "Pipeline to check for genetically modified food stuff"
    author = "Marc Hoeppner"
    homePage = "https://github.com/marchoeppner/gmo-check"
    nextflowVersion = "23.10.0"
}

process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
    overwrite = true
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_timeline.html"
}
report {
    overwrite = true
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_report.html"
}
trace {
    overwrite = true
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_trace.txt"
}
dag {
    overwrite = true
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_dag.svg"
}

// Module-specific configuration options
includeConfig 'conf/modules.config'

includeConfig 'conf/base.config'
includeConfig 'conf/resources.config'

// Load centrally stored profiles
try {
    includeConfig "${params.custom_config_base}/custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load remote pipeline profiles: ${params.custom_config_base}/custom.config")
}

profiles {

    docker { 
        docker.enabled = true 
    }
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
    }
    podman {
        podman.enabled = false
    }
    conda {
        conda.enabled = false
    }
    test {
        includeConfig 'conf/test.config'
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if(type == 'memory'){
        try {
            if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'time'){
        try {
            if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'cpus'){
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

